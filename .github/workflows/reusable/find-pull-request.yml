name: Find, Approve, and Merge Pull Requests
on:
  # - push
  pull_request:
  workflow_dispatch:
  workflow_call:
    secrets:
      GH_PAT:
        required: true
      GH_USERNAME:
        required: true
      GH_ORG:
        required: true
permissions:
  issues: write
  pull-requests: write
  contents: write
jobs:
  build:
    runs-on: ubuntu-latest
    env:
      GH_USERNAME: ${{ secrets.GH_USERNAME }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2
      - name: Find Pull Request
        uses: juliangruber/find-pull-request-action@v1.9.0
        id: find-pull-request
        with:
          author: dependabot[bot]
          state: open
          repo: ${{ github.repository }}
          sort: created
          direction: desc
          labels: dependencies
          github-token: ${{ secrets.GITHUB_TOKEN }}
      - run: echo "Pull Request ${{ steps.find-pull-request.outputs.number }} (${{ steps.find-pull-request.outputs.head-sha }})"
        env:
          number: ${{ steps.find-pull-request.outputs.number }}
          sha: ${{ steps.find-pull-request.outputs.head-sha }}
          title: ${{ steps.find-pull-request.outputs.title }}
          base-repo: ${{ steps.find-pull-request.outputs.base-repo }}
      - name: Approve Pull Request
        if: steps.find-pull-request.outputs.number != ''
        uses: juliangruber/approve-pull-request-action@v2.0.6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          number: ${{ steps.find-pull-request.outputs.number }}
          repo: ${{ github.repository }}
      - name: Wait and Merge Pull Request
        if: steps.find-pull-request.outputs.number != ''
        uses: actions/github-script@v7.0.1
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const prNumber = ${{ steps.find-pull-request.outputs.number }};
            const maxAttempts = 3;
            const delaySeconds = 30;

            for (let attempt = 1; attempt <= maxAttempts; attempt++) {
              try {
                console.log(`Attempt ${attempt} of ${maxAttempts} to merge PR #${prNumber}`);
                await github.rest.pulls.merge({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  pull_number: prNumber,
                  merge_method: 'merge'
                });
                console.log('PR merged successfully');
                break;
              } catch (error) {
                if (error.message.includes('Merge already in progress')) {
                  if (attempt < maxAttempts) {
                    console.log(`Merge in progress, waiting ${delaySeconds} seconds before retry...`);
                    await new Promise(resolve => setTimeout(resolve, delaySeconds * 1000));
                  } else {
                    console.log('Max attempts reached, merge failed');
                    throw error;
                  }
                } else {
                  throw error;
                }
              }
            }
